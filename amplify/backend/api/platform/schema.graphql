# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# Data Types https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html
# https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# Auth Models

type User @model {
  id: ID!
  name: String!
  dateOfBirth: AWSDate
  isProfileUpdated: Boolean!
  isValidatedStep1: Boolean
  isValidatedStep2: Boolean
  addresss: String
  cellphone: AWSPhone
  role: String!
  subrole: String
  status: String
  email: AWSEmail
  wallets: [Wallet] @hasMany(indexName: "byUser", fields: ["id"])
  verifierVerifications: [Verification]
    @hasMany(indexName: "byVerifierUser", fields: ["id"])
  verifiedVerifications: [Verification]
    @hasMany(indexName: "byVerifiedUser", fields: ["id"])
  userProducts: [UserProduct] @hasMany(indexName: "byUser", fields: ["id"])
  documents: [Document] @hasMany(indexName: "byUser", fields: ["id"])
  companies: [Company] @hasMany(indexName: "byUser", fields: ["id"])
  payments: [Payment] @hasMany(indexName: "byUser", fields: ["id"])
  marketplaceID: ID @index(name: "byMarketplace")
  marketplace: Marketplace @belongsTo(fields: ["marketplaceID"])
}

type Wallet @model {
  id: ID!
  name: String
  status: String
  password: String
  seed: String
  address: String!
  stake_address: String!
  isSelected: Boolean
  claimed_token: Boolean
  isAdmin: Boolean
  userID: ID @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  orders: [Order] @hasMany(indexName: "byWallet", fields: ["id"])
  boughtOrders: [Order] @hasMany(indexName: "byWalletBuyer", fields: ["id"])
  transactions: [Transactions] @hasMany(indexName: "byWallet", fields: ["id"])
  claimedToken: [ClaimedToken] @hasMany(indexName: "byWallet", fields: ["id"])
}

type Verification @model {
  id: ID!
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  sign: String
  userVerifierID: ID @index(name: "byVerifierUser")
  userVerifier: User @belongsTo(fields: ["userVerifierID"])
  userVerifiedID: ID @index(name: "byVerifiedUser")
  userVerified: User @belongsTo(fields: ["userVerifiedID"])
  productFeatureID: ID! @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  verificationComments: [VerificationComment]
    @hasMany(indexName: "byVerification", fields: ["id"])
}

type VerificationComment @model {
  id: ID!
  comment: String
  isCommentByVerifier: Boolean
  verificationID: ID! @index(name: "byVerification")
  verification: Verification @belongsTo(fields: ["verificationID"])
}

type Document @model {
  id: ID!
  data: AWSJSON
  timeStamp: AWSTimestamp
  docHash: String
  url: AWSURL
  signed: String
  signedHash: String
  isApproved: Boolean
  status: String
  isUploadedToBlockChain: Boolean
  productFeatureID: ID! @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
}

# Product Models

type Category @model {
  id: ID!
  name: String!
  isSelected: Boolean
  products: [Product] @hasMany(indexName: "byCategory", fields: ["id"])
}

type ProductItem @model {
  id: ID!
  name: String!
  type: String!
}

type Marketplace @model {
  id: ID!
  name: String!
  oracleTokenName: String
  oracleWalletID: ID
  oracleWallet: Wallet @hasOne(fields: ["oracleWalletID"])
  adminWalletID: ID
  adminWallet: Wallet @hasOne(fields: ["adminWalletID"])
  scripts: [Script] @hasMany(indexName: "byMarketplace", fields: ["id"])
  products: [Product] @hasMany(indexName: "byMarketplace", fields: ["id"])
  users: [User] @hasMany(indexName: "byMarketplace", fields: ["id"])
  claimedToken: [ClaimedToken] @hasMany(indexName: "byMarketplace", fields: ["id"])
}

type Product @model {
  id: ID!
  name: String!
  description: String
  isActive: Boolean!
  isActiveOnPlatform: Boolean
  showOn: String
  order: Int
  status: String
  timeOnVerification: AWSTimestamp
  projectReadiness: Boolean
  tokenClaimedByOwner: Boolean
  tokenGenesis: Boolean
  categoryID: ID! @index(name: "byCategory")
  category: Category @belongsTo(fields: ["categoryID"])
  marketplaceID: ID @index(name: "byMarketplace")
  marketplace: Marketplace @belongsTo(fields: ["marketplaceID"])
  images: [Image] @hasMany(indexName: "byProduct", fields: ["id"])
  productFeatures: [ProductFeature]
    @hasMany(indexName: "byProduct", fields: ["id"])
  userProducts: [UserProduct] @hasMany(indexName: "byProduct", fields: ["id"])
  transactions: [Transactions] @hasMany(indexName: "byProduct", fields: ["id"])
  orders: [Order] @hasMany(indexName: "byProduct", fields: ["id"])
  companies: [Company] @hasMany(indexName: "byProduct", fields: ["id"])
  payments: [Payment] @hasMany(indexName: "byProduct", fields: ["id"])
  scripts: [Script] @hasMany(indexName: "byProduct", fields: ["id"])
  tokens: [Token] @hasMany(indexName: "byProduct", fields: ["id"])
  analysis: [Analysis] @hasMany(indexName: "byProduct", fields: ["id"])
  apiQueries: [ApiQuery] @hasMany(indexName: "byProduct", fields: ["id"])
}

type Analysis @model {
  id: ID!
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  imgAnteriorNombreImg: String
  imgAnteriorSatellite: String
  imgAnteriorYear: Int
  imgAnteriorMesInicial: Int
  imgAnteriorMesFinal: Int
  imgAnteriorNubosidadMaxima: Int
  imgAnteriorBandas: String
  imgPosteriorNombreImg: String
  imgPosteriorSatellite: String
  imgPosteriorYear: Int
  imgPosteriorMesInicial: Int
  imgPosteriorMesFinal: Int
  imgPosteriorNubosidadMaxima: Int
  imgPosteriorBandas: String
  resultados: AWSJSON
  ajustado: Boolean
}

type AnalysisResult @model {
  id: ID!
  fuente: String!
  modelo: String!
  cobertura: String!
  valor: Float!
  unidad: String!
  proyecto: String!
  nombreImagen: String!
  data: String!
}

type ApiQuery @model {
  id: ID!
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  cedulaCatastral: String
  imgAnteriorSatellite: String!
  imgAnteriorYear: Int!
  imgAnteriorMesInicial: Int!
  imgAnteriorMesFinal: Int!
  imgAnteriorNubosidadMaxima: Int!
  imgPosteriorSatellite: String!
  imgPosteriorYear: Int!
  imgPosteriorMesInicial: Int!
  imgPosteriorMesFinal: Int!
  imgPosteriorNubosidadMaxima: Int!
  fechaHoraConsulta: AWSTimestamp
  fechaHoraActualizacion: AWSTimestamp
  verificado: Boolean!
  rawConsulta: AWSJSON
  resultadoConsulta: AWSJSON
}

type Image @model {
  id: ID!
  imageURL: String!
  format: String!
  title: String
  imageURLToDisplay: String
  isOnCarousel: Boolean
  carouselLabel: String
  carouselDescription: String
  isActive: Boolean!
  order: Int
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

type FeatureType @model {
  id: ID!
  name: String!
  description: String
  features: [Feature] @hasMany(indexName: "byFeatureType", fields: ["id"])
}

type Feature @model {
  id: ID!
  name: String!
  description: String
  isTemplate: Boolean
  isVerifable: Boolean
  defaultValue: String
  formOrder: Int
  formHint: String
  formRequired: Boolean
  formAppearance: String
  formRelevant: String
  formConstraint: String
  formRequiredMessage: String
  parentID: ID @index(name: "byParent", queryField: "featureByParent")
  children: [Feature] @hasMany(indexName: "byParent", fields: ["id"])
  featureTypeID: ID @index(name: "byFeatureType")
  featureType: FeatureType @belongsTo(fields: ["featureTypeID"])
  unitOfMeasureID: ID @index(name: "byUnitOfMeasure")
  unitOfMeasure: UnitOfMeasure @belongsTo(fields: ["unitOfMeasureID"])
  productFeatures: [ProductFeature]
    @hasMany(indexName: "byFeature", fields: ["id"])
  featureFormulas: [FeatureFormula]
    @hasMany(indexName: "byFeature", fields: ["id"])
}
# Formulas
type UnitOfMeasure @model {
  id: ID!
  engineeringUnit: String!
  description: String
  isFloat: Boolean
  features: [Feature] @hasMany(indexName: "byUnitOfMeasure", fields: ["id"])
  formulas: [Formula] @hasMany(indexName: "byUnitOfMeasure", fields: ["id"])
}

type Formula @model {
  id: ID!
  varID: String!
  equation: String!
  unitOfMeasureID: ID @index(name: "byUnitOfMeasure")
  unitOfMeasure: UnitOfMeasure @belongsTo(fields: ["unitOfMeasureID"])
  results: [Result] @hasMany(indexName: "byFormula", fields: ["id"])
  featureFormulas: [FeatureFormula]
    @hasMany(indexName: "byFormula", fields: ["id"])
}

type FeatureFormula @model {
  id: ID!
  featureID: ID! @index(name: "byFeature")
  feature: Feature @belongsTo(fields: ["featureID"])
  formulaID: ID! @index(name: "byFormula")
  formula: Formula @belongsTo(fields: ["formulaID"])
}

type Result @model {
  id: ID!
  varID: String!
  value: Float
  dateTimeStamp: AWSTimestamp
  formulaID: ID! @index(name: "byFormula")
  formula: Formula @belongsTo(fields: ["formulaID"])
  productFeatureResults: [ProductFeatureResult]
    @hasMany(indexName: "byResult", fields: ["id"])
}

type ProductFeature @model {
  id: ID!
  value: String
  isToBlockChain: Boolean
  order: Int
  isOnMainCard: Boolean
  isResult: Boolean
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  featureID: ID! @index(name: "byFeature")
  feature: Feature @belongsTo(fields: ["featureID"])
  verifications: [Verification]
    @hasMany(indexName: "byProductFeature", fields: ["id"])
  documents: [Document] @hasMany(indexName: "byProductFeature", fields: ["id"])
  productFeatureResults: [ProductFeatureResult]
    @hasMany(indexName: "byProductFeature", fields: ["id"])
}

type ProductFeatureResult @model {
  id: ID!
  isActive: Boolean!
  productFeatureID: ID @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  resultID: ID @index(name: "byResult")
  result: Result @belongsTo(fields: ["resultID"])
}

type UserProduct @model {
  id: ID!
  isFavorite: Boolean
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

type Order @model {
  id: ID! # local order ID
  statusCode: String
  tokenPolicyId: String
  tokenName: String
  tokenAmount: Float
  utxos: String
  value: Float
  walletBuyerID: ID @index(name: "byWalletBuyer")
  walletBuyer: Wallet @belongsTo(fields: ["walletBuyerID"])
  scriptID: ID @index(name: "byScript")
  script: Script @belongsTo(fields: ["scriptID"])
  walletID: ID @index(name: "byWallet")
  wallet: Wallet @belongsTo(fields: ["walletID"])
  productID: ID @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

# En caso wallet guardar ADAS recibidos
# Agregar tasa de cambio
# Tabla nueva
type Payment @model {
  id: ID! # local order ID
  orderType: String # fiat | wallet
  ref: String
  walletAddress: String
  statusCode: String
  walletStakeAddress: String
  tokenName: String
  tokenAmount: Int
  fee: Float
  baseValue: Float
  finalValue: Float
  currency: String
  exchangeRate: Float # Tasa de cambio
  timestamp: AWSTimestamp # timestamp
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  userID: ID @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  claimedByUser: Boolean
}

type Transactions @model {
  id: ID!
  addressOrigin: String
  addressDestination: AWSJSON
  walletID: ID @index(name: "byWallet")
  txIn: AWSJSON
  txOutput: AWSJSON
  txCborhex: String
  txHash: String
  mint: AWSJSON
  scriptDataHash: String
  metadataUrl: String
  redeemer: String
  fees: Float
  network: String
  type: String
  productID: ID @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  signed: Boolean!
}

type Company @model {
  id: ID!
  name: String
  description: String
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

type Script @model {
  id: ID!
  scriptParentID: ID @index(name: "byScriptParent")
  scripts: [Script] @hasMany(indexName: "byScriptParent", fields: ["id"])
  name: String!
  script_type: String! # mintSuanCO2/mintProject/spend/any
  script_category: String! # NativeScript/PlutusV1/PlutusV2/PlutusV3
  marketplaceID: ID @index(name: "byMarketplace")
  marketplace: Marketplace @belongsTo(fields: ["marketplaceID"])
  pbk: [String] # List[pkh]
  token_name: String
  cbor: String!
  productID: ID @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  testnetAddr: String!
  MainnetAddr: String!
  Active: Boolean!
  base_code: AWSURL
  orders: [Order] @hasMany(indexName: "byWallet", fields: ["id"])
}

type Rate @model {
  id: ID!
  currency: String
  value: Float
}

type Token @model {
  id: ID!
  productID: ID @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  policyID: String
  tokenName: String
  supply: Int
  oraclePrice: Int
}

type ClaimedToken @model {
  id: ID!
  marketplaceID: ID! @index(name: "byMarketplace")
  walletID: ID! @index(name: "byWallet")
  marketplace: Marketplace @belongsTo(fields: ["marketplaceID"])
  wallet: Wallet @belongsTo(fields: ["walletID"])
}